// Code generated by go-bindata.
// sources:
// testdump.sql
// DO NOT EDIT!

package sqlite3mappers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdumpSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\x4d\x6f\xd3\x40\x10\x86\xef\xf9\x15\x56\x4e\xad\x94\x89\xf6\x7b\x77\xd4\x13\x87\x1e\x2a\xa1\x22\xd1\xc2\x15\xcf\xec\x8e\xc1\x08\xdb\x15\xb1\x05\x3f\x9f\x75\xc0\x89\x28\x47\x72\xc9\xbb\xa3\xd5\xe3\x67\xde\xdd\x3d\x3c\x3e\xdd\xbf\x7f\x6e\x1e\x1e\x9f\xdf\x35\x6d\x3f\x76\xdf\xa6\x1f\xed\x4d\xbb\x8c\xfd\xcf\xb9\x1f\xe4\x34\xd3\xf0\xd2\x1e\x9a\xb6\x4c\x79\x19\x64\x9c\x3f\x7d\x5e\xfa\xb2\x0e\x46\x1a\x64\xfd\xa7\x61\x5a\xc6\x79\x4d\xa7\x69\xf9\x9e\xa5\xbd\x6d\x3e\xbe\x79\xfb\xe1\xfe\x69\xd7\xd4\xdf\x8d\x3f\x34\xfb\x22\x54\xb2\xf3\x11\x28\xb0\x07\xa7\xa2\x06\xd4\x5a\x80\x23\x76\x06\xad\x49\x26\x98\x7d\xbd\xb7\x22\x75\x0d\xe6\xa8\xea\xe9\xeb\xc4\x7a\x7f\x7b\xf8\x8d\x31\x75\x90\x24\x10\xa7\x50\x20\x7b\x9b\xc1\xb1\x45\x48\x39\x32\x78\x09\xd1\xe4\x90\x53\x8a\x65\xc3\xac\x3c\xbb\x61\xcc\x05\x13\xea\x40\x61\x22\x8b\x98\xc1\x0a\x46\x70\xc2\x0c\x2c\x5e\x80\xac\xa7\x98\xbb\x4e\xd5\xcf\x6c\x18\x5b\x83\x3b\xea\xd7\x36\xe9\xbc\x94\x35\x26\x09\x03\x7a\x74\xe0\x28\xd5\x7d\xb0\xda\x24\x85\x86\x8c\xf5\x96\xc9\x6e\x18\x57\x83\x3f\xda\x8b\xcd\xdd\xee\xef\xda\xa7\x65\xfe\x8f\xde\x4b\xbd\xdd\x8f\x34\xf7\xd3\xf8\xaa\xfc\x55\x9c\xad\x43\x8b\x3e\x01\x3b\x14\x70\x7e\x35\x2e\xde\x02\x29\x9b\x6b\x71\xd9\x78\xc9\x9b\xa7\x3f\xb7\xe6\xea\xe9\xf4\x65\x7a\xb9\xee\xbb\x9a\x27\xec\x58\x27\x64\x50\x56\x74\x7d\x44\x2e\xc0\x26\x78\xe8\x44\x32\x27\x83\x41\x29\xbf\x71\xc2\xb9\x36\xff\x0f\x27\xae\x3e\xa8\x3b\x53\x72\x07\x4c\x9a\x6a\xfd\x48\x40\xc6\x6b\xe8\xba\xea\x97\x85\x73\x21\xd9\x38\xf1\xdc\x9b\xfe\xc3\xb9\x3e\xe3\x6a\xc8\x91\x32\x93\x2a\x10\xc5\x30\xb8\x60\x0a\x90\x0b\x0a\xb4\xe7\x52\x75\x74\x52\xe9\xe2\x93\x6a\x08\xc7\x74\xe5\xdc\xed\x7e\x05\x00\x00\xff\xff\x62\xfb\xac\xb5\xf8\x02\x00\x00")

func testdumpSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdumpSql,
		"testdump.sql",
	)
}

func testdumpSql() (*asset, error) {
	bytes, err := testdumpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdump.sql", size: 760, mode: os.FileMode(436), modTime: time.Unix(1465332302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdump.sql": testdumpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"testdump.sql": &bintree{testdumpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
