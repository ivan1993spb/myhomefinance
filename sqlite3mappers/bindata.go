// Code generated by go-bindata.
// sources:
// db.sql
// DO NOT EDIT!

package sqlite3mappers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x94\xcf\x6e\x9c\x30\x10\xc6\xef\x3c\xc5\x5c\xaa\x85\x8a\x56\xa9\x2a\x55\x95\x72\x72\x58\xd3\xa2\xb2\x50\x19\x93\x66\x4f\x01\xb1\xde\xc8\x52\xb0\x23\x3c\x28\x79\xfc\x1a\xe2\x65\x59\x9a\x26\x6a\xab\xde\xc2\xd1\xf3\xe7\x9b\xf9\x7d\x36\x5e\xc4\x28\xe1\x14\x38\xb9\x48\x29\x24\x31\x64\x39\x07\x7a\x95\x14\xbc\x80\x4a\x69\x14\xa6\x02\xdf\x03\xfb\x55\x72\x57\xc1\xec\x4b\x32\x4e\xbf\x50\x06\xdf\x59\xb2\x21\x6c\x0b\xdf\xe8\x16\x48\xc9\xf3\x24\xb3\x2d\x37\x34\xe3\xe1\x63\x99\xaa\x5b\x31\x2b\xbc\x24\x2c\xfa\x4a\x98\xff\xf1\xec\x2c\x18\xc5\xb2\x32\x4d\x5d\x6a\xaf\xe4\x03\xca\x56\x18\xac\xdb\xbb\x6a\x50\xf8\x0c\x6b\x1a\x93\x32\xe5\xe0\x1b\xec\xf6\x43\xd0\x5f\xbd\x31\xab\x10\x56\x4a\xdf\xaf\x82\x5f\x5a\xa0\x78\xc0\x99\x1a\xa7\x57\xdc\x0b\xce\xbd\x67\xd7\x94\x6a\x7f\xab\xef\xff\x75\xcf\x9d\x6e\xfa\x56\x28\xbc\xbe\xe9\x87\x0e\xd3\x9e\x9f\xfe\xc7\x9a\x7f\x00\xb5\x6e\x75\xaf\x8e\x4c\xd6\x79\x39\x20\x58\x24\xed\x84\x69\x3a\x79\x87\x52\xab\xca\x61\x73\x11\xa3\xfb\xae\x39\x6a\x3d\xa9\xf4\x22\x61\xdd\xe3\x2b\xe2\xdf\x22\xb6\x11\x94\xaa\x3e\x44\x9e\x53\xc2\xba\xbb\x11\xf8\xa4\x1b\x2e\xa3\x39\x19\xc5\xcd\xe2\x62\xad\xc0\x4e\x36\xd7\x16\x0e\xce\x85\x3e\x1c\xab\x8d\x9d\xc2\xec\xeb\xc6\xcd\x12\xa7\x39\x39\x79\x3f\x97\x09\xfd\xb1\x34\x17\xbb\x5a\x99\xc7\x12\xfb\xb3\x20\xc5\xd8\xa9\xa0\x29\x8d\x38\xbc\x85\x98\xe5\x1b\x67\xfb\xec\x7c\x61\x65\xb8\x74\x2c\x74\xfc\xc3\x09\x6e\xb8\x20\x38\xf6\x3d\x3c\xdd\xa9\x7d\x99\x25\x79\xf6\xf7\x62\xef\x26\x2b\x49\xf1\x82\xf2\xe1\x4a\x8f\x62\x01\x54\x9d\x30\xfd\x2d\x0e\x6c\x6d\xce\x78\x98\xb3\xb5\xbd\xd3\x17\x5b\xf0\x4f\x83\xef\x17\xf2\x81\xbd\x99\x45\x74\xee\xfd\x0c\x00\x00\xff\xff\x9d\xe0\x9a\xf2\x8b\x05\x00\x00")

func dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSql,
		"db.sql",
	)
}

func dbSql() (*asset, error) {
	bytes, err := dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db.sql", size: 1419, mode: os.FileMode(436), modTime: time.Unix(1465398700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db.sql": dbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db.sql": &bintree{dbSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
