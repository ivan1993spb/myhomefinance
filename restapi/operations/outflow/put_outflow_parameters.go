package outflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutOutflowParams creates a new PutOutflowParams object
// with the default values initialized.
func NewPutOutflowParams() PutOutflowParams {
	var ()
	return PutOutflowParams{}
}

// PutOutflowParams contains all the bound params for the put outflow operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutOutflow
type PutOutflowParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: formData
	*/
	Amount *float64
	/*
	  In: formData
	*/
	Count *float64
	/*
	  In: formData
	*/
	Datetime *strfmt.DateTime
	/*
	  In: formData
	*/
	Description *string
	/*
	  Max Length: 300
	  Min Length: 2
	  In: formData
	*/
	Destination *string
	/*outflow document id
	  Required: true
	  Minimum: 1
	  In: query
	*/
	ID int64
	/*
	  Max Length: 100
	  In: formData
	*/
	MetricUnit *string
	/*
	  Max Length: 300
	  Min Length: 2
	  In: formData
	*/
	Name *string
	/*
	  In: formData
	*/
	Satisfaction *float32
	/*
	  Max Length: 300
	  Min Length: 2
	  In: formData
	*/
	Target *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PutOutflowParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	fdAmount, fdhkAmount, _ := fds.GetOK("amount")
	if err := o.bindAmount(fdAmount, fdhkAmount, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCount, fdhkCount, _ := fds.GetOK("count")
	if err := o.bindCount(fdCount, fdhkCount, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDatetime, fdhkDatetime, _ := fds.GetOK("datetime")
	if err := o.bindDatetime(fdDatetime, fdhkDatetime, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDestination, fdhkDestination, _ := fds.GetOK("destination")
	if err := o.bindDestination(fdDestination, fdhkDestination, route.Formats); err != nil {
		res = append(res, err)
	}

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdMetricUnit, fdhkMetricUnit, _ := fds.GetOK("metric_unit")
	if err := o.bindMetricUnit(fdMetricUnit, fdhkMetricUnit, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdSatisfaction, fdhkSatisfaction, _ := fds.GetOK("satisfaction")
	if err := o.bindSatisfaction(fdSatisfaction, fdhkSatisfaction, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTarget, fdhkTarget, _ := fds.GetOK("target")
	if err := o.bindTarget(fdTarget, fdhkTarget, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutOutflowParams) bindAmount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("amount", "formData", "float64", raw)
	}
	o.Amount = &value

	return nil
}

func (o *PutOutflowParams) bindCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("count", "formData", "float64", raw)
	}
	o.Count = &value

	return nil
}

func (o *PutOutflowParams) bindDatetime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("datetime", "formData", "strfmt.DateTime", raw)
	}
	o.Datetime = (value.(*strfmt.DateTime))

	return nil
}

func (o *PutOutflowParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

func (o *PutOutflowParams) bindDestination(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Destination = &raw

	if err := o.validateDestination(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) validateDestination(formats strfmt.Registry) error {

	if err := validate.MinLength("destination", "formData", string(*o.Destination), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("destination", "formData", string(*o.Destination), 300); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "query", "int64", raw)
	}
	o.ID = value

	if err := o.validateID(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) validateID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("id", "query", int64(o.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) bindMetricUnit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.MetricUnit = &raw

	if err := o.validateMetricUnit(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) validateMetricUnit(formats strfmt.Registry) error {

	if err := validate.MaxLength("metric_unit", "formData", string(*o.MetricUnit), 100); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) validateName(formats strfmt.Registry) error {

	if err := validate.MinLength("name", "formData", string(*o.Name), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "formData", string(*o.Name), 300); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) bindSatisfaction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat32(raw)
	if err != nil {
		return errors.InvalidType("satisfaction", "formData", "float32", raw)
	}
	o.Satisfaction = &value

	return nil
}

func (o *PutOutflowParams) bindTarget(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Target = &raw

	if err := o.validateTarget(formats); err != nil {
		return err
	}

	return nil
}

func (o *PutOutflowParams) validateTarget(formats strfmt.Registry) error {

	if err := validate.MinLength("target", "formData", string(*o.Target), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("target", "formData", string(*o.Target), 300); err != nil {
		return err
	}

	return nil
}
