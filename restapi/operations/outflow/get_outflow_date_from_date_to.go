package outflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOutflowDateFromDateToHandlerFunc turns a function with the right signature into a get outflow date from date to handler
type GetOutflowDateFromDateToHandlerFunc func(GetOutflowDateFromDateToParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOutflowDateFromDateToHandlerFunc) Handle(params GetOutflowDateFromDateToParams) middleware.Responder {
	return fn(params)
}

// GetOutflowDateFromDateToHandler interface for that can handle valid get outflow date from date to params
type GetOutflowDateFromDateToHandler interface {
	Handle(GetOutflowDateFromDateToParams) middleware.Responder
}

// NewGetOutflowDateFromDateTo creates a new http.Handler for the get outflow date from date to operation
func NewGetOutflowDateFromDateTo(ctx *middleware.Context, handler GetOutflowDateFromDateToHandler) *GetOutflowDateFromDateTo {
	return &GetOutflowDateFromDateTo{Context: ctx, Handler: handler}
}

/*GetOutflowDateFromDateTo swagger:route GET /outflow/{date_from}_{date_to} outflow getOutflowDateFromDateTo

GetOutflowDateFromDateTo get outflow date from date to API

*/
type GetOutflowDateFromDateTo struct {
	Context *middleware.Context
	Handler GetOutflowDateFromDateToHandler
}

func (o *GetOutflowDateFromDateTo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetOutflowDateFromDateToParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
