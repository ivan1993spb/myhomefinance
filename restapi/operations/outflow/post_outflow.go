package outflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostOutflowHandlerFunc turns a function with the right signature into a post outflow handler
type PostOutflowHandlerFunc func(PostOutflowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostOutflowHandlerFunc) Handle(params PostOutflowParams) middleware.Responder {
	return fn(params)
}

// PostOutflowHandler interface for that can handle valid post outflow params
type PostOutflowHandler interface {
	Handle(PostOutflowParams) middleware.Responder
}

// NewPostOutflow creates a new http.Handler for the post outflow operation
func NewPostOutflow(ctx *middleware.Context, handler PostOutflowHandler) *PostOutflow {
	return &PostOutflow{Context: ctx, Handler: handler}
}

/*PostOutflow swagger:route POST /outflow outflow postOutflow

PostOutflow post outflow API

*/
type PostOutflow struct {
	Context *middleware.Context
	Handler PostOutflowHandler
}

func (o *PostOutflow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostOutflowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
