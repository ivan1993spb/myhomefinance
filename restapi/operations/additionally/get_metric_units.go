package additionally

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMetricUnitsHandlerFunc turns a function with the right signature into a get metric units handler
type GetMetricUnitsHandlerFunc func(GetMetricUnitsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetricUnitsHandlerFunc) Handle(params GetMetricUnitsParams) middleware.Responder {
	return fn(params)
}

// GetMetricUnitsHandler interface for that can handle valid get metric units params
type GetMetricUnitsHandler interface {
	Handle(GetMetricUnitsParams) middleware.Responder
}

// NewGetMetricUnits creates a new http.Handler for the get metric units operation
func NewGetMetricUnits(ctx *middleware.Context, handler GetMetricUnitsHandler) *GetMetricUnits {
	return &GetMetricUnits{Context: ctx, Handler: handler}
}

/*GetMetricUnits swagger:route GET /metric-units additionally getMetricUnits

Returns list of metric units

*/
type GetMetricUnits struct {
	Context *middleware.Context
	Handler GetMetricUnitsHandler
}

func (o *GetMetricUnits) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetMetricUnitsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
