package additionally

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSourcesGrepHandlerFunc turns a function with the right signature into a get sources grep handler
type GetSourcesGrepHandlerFunc func(GetSourcesGrepParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSourcesGrepHandlerFunc) Handle(params GetSourcesGrepParams) middleware.Responder {
	return fn(params)
}

// GetSourcesGrepHandler interface for that can handle valid get sources grep params
type GetSourcesGrepHandler interface {
	Handle(GetSourcesGrepParams) middleware.Responder
}

// NewGetSourcesGrep creates a new http.Handler for the get sources grep operation
func NewGetSourcesGrep(ctx *middleware.Context, handler GetSourcesGrepHandler) *GetSourcesGrep {
	return &GetSourcesGrep{Context: ctx, Handler: handler}
}

/*GetSourcesGrep swagger:route GET /sources/grep additionally getSourcesGrep

Returns list of sources

*/
type GetSourcesGrep struct {
	Context *middleware.Context
	Handler GetSourcesGrepHandler
}

func (o *GetSourcesGrep) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSourcesGrepParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
