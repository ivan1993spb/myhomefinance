package additionally

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDestinationsGrepParams creates a new GetDestinationsGrepParams object
// with the default values initialized.
func NewGetDestinationsGrepParams() GetDestinationsGrepParams {
	var ()
	return GetDestinationsGrepParams{}
}

// GetDestinationsGrepParams contains all the bound params for the get destinations grep operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDestinationsGrep
type GetDestinationsGrepParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*length 1-300 chars
	  Required: true
	  Max Length: 300
	  Min Length: 1
	  In: formData
	*/
	S string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetDestinationsGrepParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	fdS, fdhkS, _ := fds.GetOK("s")
	if err := o.bindS(fdS, fdhkS, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDestinationsGrepParams) bindS(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("s", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("s", "formData", raw); err != nil {
		return err
	}

	o.S = raw

	if err := o.validateS(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetDestinationsGrepParams) validateS(formats strfmt.Registry) error {

	if err := validate.MinLength("s", "formData", string(o.S), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("s", "formData", string(o.S), 300); err != nil {
		return err
	}

	return nil
}
