package additionally

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDestinationsGrepHandlerFunc turns a function with the right signature into a get destinations grep handler
type GetDestinationsGrepHandlerFunc func(GetDestinationsGrepParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDestinationsGrepHandlerFunc) Handle(params GetDestinationsGrepParams) middleware.Responder {
	return fn(params)
}

// GetDestinationsGrepHandler interface for that can handle valid get destinations grep params
type GetDestinationsGrepHandler interface {
	Handle(GetDestinationsGrepParams) middleware.Responder
}

// NewGetDestinationsGrep creates a new http.Handler for the get destinations grep operation
func NewGetDestinationsGrep(ctx *middleware.Context, handler GetDestinationsGrepHandler) *GetDestinationsGrep {
	return &GetDestinationsGrep{Context: ctx, Handler: handler}
}

/*GetDestinationsGrep swagger:route GET /destinations/grep additionally getDestinationsGrep

Returns list of destinations

*/
type GetDestinationsGrep struct {
	Context *middleware.Context
	Handler GetDestinationsGrepHandler
}

func (o *GetDestinationsGrep) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDestinationsGrepParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
