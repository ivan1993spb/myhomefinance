package additionally

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTargetsGrepHandlerFunc turns a function with the right signature into a get targets grep handler
type GetTargetsGrepHandlerFunc func(GetTargetsGrepParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTargetsGrepHandlerFunc) Handle(params GetTargetsGrepParams) middleware.Responder {
	return fn(params)
}

// GetTargetsGrepHandler interface for that can handle valid get targets grep params
type GetTargetsGrepHandler interface {
	Handle(GetTargetsGrepParams) middleware.Responder
}

// NewGetTargetsGrep creates a new http.Handler for the get targets grep operation
func NewGetTargetsGrep(ctx *middleware.Context, handler GetTargetsGrepHandler) *GetTargetsGrep {
	return &GetTargetsGrep{Context: ctx, Handler: handler}
}

/*GetTargetsGrep swagger:route GET /targets/grep additionally getTargetsGrep

Returns list of targets

*/
type GetTargetsGrep struct {
	Context *middleware.Context
	Handler GetTargetsGrepHandler
}

func (o *GetTargetsGrep) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetTargetsGrepParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
