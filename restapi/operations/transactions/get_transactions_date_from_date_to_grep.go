package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTransactionsDateFromDateToGrepHandlerFunc turns a function with the right signature into a get transactions date from date to grep handler
type GetTransactionsDateFromDateToGrepHandlerFunc func(GetTransactionsDateFromDateToGrepParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTransactionsDateFromDateToGrepHandlerFunc) Handle(params GetTransactionsDateFromDateToGrepParams) middleware.Responder {
	return fn(params)
}

// GetTransactionsDateFromDateToGrepHandler interface for that can handle valid get transactions date from date to grep params
type GetTransactionsDateFromDateToGrepHandler interface {
	Handle(GetTransactionsDateFromDateToGrepParams) middleware.Responder
}

// NewGetTransactionsDateFromDateToGrep creates a new http.Handler for the get transactions date from date to grep operation
func NewGetTransactionsDateFromDateToGrep(ctx *middleware.Context, handler GetTransactionsDateFromDateToGrepHandler) *GetTransactionsDateFromDateToGrep {
	return &GetTransactionsDateFromDateToGrep{Context: ctx, Handler: handler}
}

/*GetTransactionsDateFromDateToGrep swagger:route GET /transactions/{date_from}_{date_to}/grep transactions getTransactionsDateFromDateToGrep

Returns list of transactions matched with passed attributes in specified time range

*/
type GetTransactionsDateFromDateToGrep struct {
	Context *middleware.Context
	Handler GetTransactionsDateFromDateToGrepHandler
}

func (o *GetTransactionsDateFromDateToGrep) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetTransactionsDateFromDateToGrepParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
