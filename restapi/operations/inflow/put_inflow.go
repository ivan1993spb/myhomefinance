package inflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutInflowHandlerFunc turns a function with the right signature into a put inflow handler
type PutInflowHandlerFunc func(PutInflowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutInflowHandlerFunc) Handle(params PutInflowParams) middleware.Responder {
	return fn(params)
}

// PutInflowHandler interface for that can handle valid put inflow params
type PutInflowHandler interface {
	Handle(PutInflowParams) middleware.Responder
}

// NewPutInflow creates a new http.Handler for the put inflow operation
func NewPutInflow(ctx *middleware.Context, handler PutInflowHandler) *PutInflow {
	return &PutInflow{Context: ctx, Handler: handler}
}

/*PutInflow swagger:route PUT /inflow inflow putInflow

PutInflow put inflow API

*/
type PutInflow struct {
	Context *middleware.Context
	Handler PutInflowHandler
}

func (o *PutInflow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutInflowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
