package inflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetInflowDateFromDateToGrepHandlerFunc turns a function with the right signature into a get inflow date from date to grep handler
type GetInflowDateFromDateToGrepHandlerFunc func(GetInflowDateFromDateToGrepParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInflowDateFromDateToGrepHandlerFunc) Handle(params GetInflowDateFromDateToGrepParams) middleware.Responder {
	return fn(params)
}

// GetInflowDateFromDateToGrepHandler interface for that can handle valid get inflow date from date to grep params
type GetInflowDateFromDateToGrepHandler interface {
	Handle(GetInflowDateFromDateToGrepParams) middleware.Responder
}

// NewGetInflowDateFromDateToGrep creates a new http.Handler for the get inflow date from date to grep operation
func NewGetInflowDateFromDateToGrep(ctx *middleware.Context, handler GetInflowDateFromDateToGrepHandler) *GetInflowDateFromDateToGrep {
	return &GetInflowDateFromDateToGrep{Context: ctx, Handler: handler}
}

/*GetInflowDateFromDateToGrep swagger:route GET /inflow/{date_from}_{date_to}/grep inflow getInflowDateFromDateToGrep

GetInflowDateFromDateToGrep get inflow date from date to grep API

*/
type GetInflowDateFromDateToGrep struct {
	Context *middleware.Context
	Handler GetInflowDateFromDateToGrepHandler
}

func (o *GetInflowDateFromDateToGrep) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetInflowDateFromDateToGrepParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
