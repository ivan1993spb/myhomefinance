package notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetNotesDateFromDateToHandlerFunc turns a function with the right signature into a get notes date from date to handler
type GetNotesDateFromDateToHandlerFunc func(GetNotesDateFromDateToParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNotesDateFromDateToHandlerFunc) Handle(params GetNotesDateFromDateToParams) middleware.Responder {
	return fn(params)
}

// GetNotesDateFromDateToHandler interface for that can handle valid get notes date from date to params
type GetNotesDateFromDateToHandler interface {
	Handle(GetNotesDateFromDateToParams) middleware.Responder
}

// NewGetNotesDateFromDateTo creates a new http.Handler for the get notes date from date to operation
func NewGetNotesDateFromDateTo(ctx *middleware.Context, handler GetNotesDateFromDateToHandler) *GetNotesDateFromDateTo {
	return &GetNotesDateFromDateTo{Context: ctx, Handler: handler}
}

/*GetNotesDateFromDateTo swagger:route GET /notes/{date_from}_{date_to} notes getNotesDateFromDateTo

GetNotesDateFromDateTo get notes date from date to API

*/
type GetNotesDateFromDateTo struct {
	Context *middleware.Context
	Handler GetNotesDateFromDateToHandler
}

func (o *GetNotesDateFromDateTo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetNotesDateFromDateToParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
