package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Inflow inflow

swagger:model Inflow
*/
type Inflow struct {

	/* amount

	Required: true
	*/
	Amount *float64 `json:"amount"`

	/* datetime

	Required: true
	*/
	Datetime *strfmt.DateTime `json:"datetime"`

	/* description
	 */
	Description string `json:"description,omitempty"`

	/* inflow id

	Required: true
	Read Only: true
	*/
	ID int64 `json:"id"`

	/* name

	Required: true
	Max Length: 300
	Min Length: 2
	*/
	Name *string `json:"name"`

	/* source

	Required: true
	Max Length: 300
	Min Length: 2
	*/
	Source *string `json:"source"`
}

// Validate validates this inflow
func (m *Inflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Inflow) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Inflow) validateDatetime(formats strfmt.Registry) error {

	if err := validate.Required("datetime", "body", m.Datetime); err != nil {
		return err
	}

	return nil
}

func (m *Inflow) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Inflow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 300); err != nil {
		return err
	}

	return nil
}

func (m *Inflow) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if err := validate.MinLength("source", "body", string(*m.Source), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("source", "body", string(*m.Source), 300); err != nil {
		return err
	}

	return nil
}
