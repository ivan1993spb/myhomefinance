package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Note note

swagger:model Note
*/
type Note struct {

	/* datetime

	Required: true
	*/
	Datetime *strfmt.DateTime `json:"datetime"`

	/* id

	Required: true
	Read Only: true
	*/
	ID int64 `json:"id"`

	/* name

	Required: true
	Max Length: 300
	Min Length: 2
	*/
	Name *string `json:"name"`

	/* text
	 */
	Text string `json:"text,omitempty"`
}

// Validate validates this note
func (m *Note) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatetime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Note) validateDatetime(formats strfmt.Registry) error {

	if err := validate.Required("datetime", "body", m.Datetime); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 300); err != nil {
		return err
	}

	return nil
}
