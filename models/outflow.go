package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Outflow outflow

swagger:model Outflow
*/
type Outflow struct {

	/* amount

	Required: true
	*/
	Amount *float64 `json:"amount"`

	/* count
	 */
	Count float64 `json:"count,omitempty"`

	/* datetime

	Required: true
	*/
	Datetime *strfmt.DateTime `json:"datetime"`

	/* description
	 */
	Description string `json:"description,omitempty"`

	/* destination

	Required: true
	Max Length: 300
	Min Length: 2
	*/
	Destination *string `json:"destination"`

	/* outflow id

	Required: true
	Read Only: true
	*/
	ID int64 `json:"id"`

	/* metric unit

	Max Length: 100
	*/
	MetricUnit string `json:"metric_unit,omitempty"`

	/* name

	Required: true
	Max Length: 300
	Min Length: 2
	*/
	Name *string `json:"name"`

	/* satisfaction
	 */
	Satisfaction float32 `json:"satisfaction,omitempty"`

	/* target

	Max Length: 300
	Min Length: 2
	*/
	Target string `json:"target,omitempty"`
}

// Validate validates this outflow
func (m *Outflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetricUnit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Outflow) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateDatetime(formats strfmt.Registry) error {

	if err := validate.Required("datetime", "body", m.Datetime); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	if err := validate.MinLength("destination", "body", string(*m.Destination), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("destination", "body", string(*m.Destination), 300); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateMetricUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricUnit) { // not required
		return nil
	}

	if err := validate.MaxLength("metric_unit", "body", string(m.MetricUnit), 100); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 300); err != nil {
		return err
	}

	return nil
}

func (m *Outflow) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if err := validate.MinLength("target", "body", string(m.Target), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("target", "body", string(m.Target), 300); err != nil {
		return err
	}

	return nil
}
